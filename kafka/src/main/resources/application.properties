# Quarkus config
quarkus.ssl.native=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.write-person.topic=persons

# Configure the Kafka source (we read from it)
mp.messaging.incoming.read-person.topic=persons
mp.messaging.incoming.read-person.group.id=persons-consumers
mp.messaging.incoming.read-person.value.deserializer=org.acme.kafka.PersonDeserializer
mp.messaging.incoming.get-person.topic=persons
mp.messaging.incoming.get-person.group.id=persons-consumers
mp.messaging.incoming.get-person.value.deserializer=org.acme.kafka.PersonDeserializer

# Configure docker config
quarkus.container-image.builder=jib
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false

## dev profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:dev 
## ./mvnw package -Dquarkus.profile=dev

%dev.kafka.bootstrap.servers=https://${KAFKA_HOST}:443
%dev.kafka.security.protocol=SASL_SSL

%dev.kafka.sasl.mechanism=OAUTHBEARER
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${RHOAS_SERVICE_ACCOUNT_CLIENT_ID}" \
  oauth.client.secret="${RHOAS_SERVICE_ACCOUNT_CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${RHOAS_SERVICE_ACCOUNT_OAUTH_TOKEN_URL}" ;
%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

## sbo-dev profile that can be used for local development when using 
## service binding configuration (using .bindingroot/kafka values instead of env vars)

%sbo-dev.quarkus.kubernetes-service-binding.root=./.bindingroot

quarkus.rest-client."org.acme.kafka.NamesClient".url=https://names.drycodes.com
quarkus.rest-client.logging.scope=request-response
quarkus.rest-client.logging.body-limit=500
quarkus.log.category."org.jboss.resteasy.logging".level=DEBUG
quarkus.log.category."org.apache.http".level=DEBUG
